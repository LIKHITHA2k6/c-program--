#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TITLE 100
#define MAX_AUTHOR 100
#define FILENAME "library_data.txt"

typedef struct Book {
    int id;
    char title[MAX_TITLE];
    char author[MAX_AUTHOR];
    struct Book* next;
} Book;

Book* head = NULL;

// Function Prototypes
void loadBooksFromFile();
void saveBooksToFile();
void addBook();
void displayBooks();
void searchBook();
void deleteBook();
void clearMemory();

int main() {
    int choice;

    loadBooksFromFile();  // Load data from file

    do {
        printf("\n====== Library Management System ======\n");
        printf("1. Add Book\n");
        printf("2. Display All Books\n");
        printf("3. Search Book by ID\n");
        printf("4. Delete Book\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar();  // clear newline

        switch (choice) {
            case 1: addBook(); break;
            case 2: displayBooks(); break;
            case 3: searchBook(); break;
            case 4: deleteBook(); break;
            case 5:
                saveBooksToFile();
                clearMemory();
                printf("Exiting program. Goodbye!\n");
                break;
            default: printf("Invalid choice. Try again.\n");
        }
    } while (choice != 5);

    return 0;
}

// Add Book
void addBook() {
    Book* newBook = (Book*)malloc(sizeof(Book));
    if (!newBook) {
        printf("Memory allocation failed!\n");
        return;
    }

    printf("Enter Book ID: ");
    scanf("%d", &newBook->id);
    getchar();
    printf("Enter Book Title: ");
    fgets(newBook->title, MAX_TITLE, stdin);
    newBook->title[strcspn(newBook->title, "\n")] = 0;
    printf("Enter Author Name: ");
    fgets(newBook->author, MAX_AUTHOR, stdin);
    newBook->author[strcspn(newBook->author, "\n")] = 0;

    newBook->next = head;
    head = newBook;

    printf("Book added successfully!\n");
}

// Display Books
void displayBooks() {
    if (!head) {
        printf("Library is empty!\n");
        return;
    }

    Book* temp = head;
    printf("\n--- Book List ---\n");
    while (temp) {
        printf("ID: %d | Title: %s | Author: %s\n", temp->id, temp->title, temp->author);
        temp = temp->next;
    }
}

// Search Book by ID
void searchBook() {
    int id;
    printf("Enter Book ID to search: ");
    scanf("%d", &id);

    Book* temp = head;
    while (temp) {
        if (temp->id == id) {
            printf("Book Found:\n");
            printf("ID: %d | Title: %s | Author: %s\n", temp->id, temp->title, temp->author);
            return;
        }
        temp = temp->next;
    }

    printf("Book with ID %d not found.\n", id);
}

// Delete Book by ID
void deleteBook() {
    int id;
    printf("Enter Book ID to delete: ");
    scanf("%d", &id);

    Book* temp = head;
    Book* prev = NULL;

    while (temp) {
        if (temp->id == id) {
            if (prev == NULL) {
                head = temp->next;
            } else {
                prev->next = temp->next;
            }
            free(temp);
            printf("Book deleted successfully!\n");
            return;
        }
        prev = temp;
        temp = temp->next;
    }

    printf("Book with ID %d not found.\n", id);
}

// Save Books to File
void saveBooksToFile() {
    FILE* fp = fopen(FILENAME, "w");
    if (!fp) {
        printf("Failed to save data to file.\n");
        return;
    }

    Book* temp = head;
    while (temp) {
        fprintf(fp, "%d;%s;%s\n", temp->id, temp->title, temp->author);
        temp = temp->next;
    }

    fclose(fp);
    printf("Library saved to file successfully.\n");
}

// Load Books from File
void loadBooksFromFile() {
    FILE* fp = fopen(FILENAME, "r");
    if (!fp) return;

    while (!feof(fp)) {
        Book* newBook = (Book*)malloc(sizeof(Book));
        if (!newBook) return;

        if (fscanf(fp, "%d;%99[^;];%99[^\n]\n", &newBook->id, newBook->title, newBook->author) == 3) {
            newBook->next = head;
            head = newBook;
        } else {
            free(newBook);
        }
    }

    fclose(fp);
}

// Free all allocated memory
void clearMemory() {
    Book* temp;
    while (head) {
        temp = head;
        head = head->next;
        free(temp);
    }
}
